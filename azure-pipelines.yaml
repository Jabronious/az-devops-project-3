trigger:
  branches:
    include:
    - main

name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Provision
  jobs:
  - job: Provision_Azure_Infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: $(knownHost)
        sshPublicKey: $(pubKey)
        sshKeySecureFile: 'id_rsa'
    - task: DownloadSecureFile@1
      displayName: Download Secure tfvars file
      inputs:
        secureFile: terraform.tfvars
    - task: Bash@3
      displayName: Copying tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environment/test
    - task: Bash@3
      displayName: Confirm tfvars
      inputs:
        targetType: 'inline'
        script: ls ~/.ssh
    - task: TerraformInstaller@0
      displayName: Install
      inputs:
        terraformVersion: '0.15.3'
    - task: TerraformTaskV2@2
      displayName: Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'ServiceConnection'
        backendAzureRmResourceGroupName: 'project-3'
        backendAzureRmStorageAccountName: 'tfstate15863'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
    - task: TerraformTaskV1@0
      displayName: Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'ServiceConnection'
    - task: TerraformTaskV1@0
      displayName: Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'ServiceConnection'
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'path/to/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: ''
              appName: ''
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


