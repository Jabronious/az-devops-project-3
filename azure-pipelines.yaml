trigger:
  branches:
    include:
    - main

name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Provision
  jobs:
  - job: Provision_Azure_Infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: $(knownHosts)
        sshPublicKey: $(pubKey)
        sshKeySecureFile: terraform_rsa
    - task: DownloadSecureFile@1
      displayName: Download Secure tfvars file
      inputs:
        secureFile: terraform.tfvars
    - task: Bash@3
      displayName: Copying tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environment/test
    - task: Bash@3
      displayName: Copy ssh pub file
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform_rsa.pub ~/.ssh
    - task: Bash@3
      displayName: View Temp Dir
      inputs:
        targetType: 'inline'
        script: ls $(Agent.TempDirectory)
    - task: TerraformInstaller@0
      displayName: Install
      inputs:
        terraformVersion: '0.15.3'
    - task: TerraformTaskV2@2
      displayName: Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'TfServiceConnection'
        backendAzureRmResourceGroupName: 'project-3'
        backendAzureRmStorageAccountName: 'tfstate15863'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
    - task: TerraformTaskV1@0
      displayName: Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'TfServiceConnection'
    - task: TerraformTaskV1@0
      displayName: Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        environmentServiceNameAzureRM: 'TfServiceConnection'
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: CopyFiles@2
      displayName: 'Copy selenium files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/selenium/login.py'
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: selenium
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage: Deploys
  displayName: Deploying Web App and VM
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'TfServiceConnection'
              appName: 'ensure-quality-AppService'
              appType: webAppLinux
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Deploy Azure VM
    environment:
      name:  TEST
      resourceType: VirtualMachine
    strategy:
      runOnce:
        preDeploy:
          steps:
            - download: current
              artifact: selenium
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:some/path
          - task: Bash@3
            displayName: Selenium tests
            inputs:
              targetType: 'inline'
              script: |
                python3 login.py
- stage: Test_Suites
  displayName: Running All Tests
  jobs:
    - job: RunPostmanTests
      displayName: Postman Tests
      steps:
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'sudo npm install -g newman'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: CmdLine@2
        displayName: Run Regression Tests
        inputs:
          script: 'newman run automatedtesting/postman/Starter_APIs.postman_collection.json -e automatedtesting/postman/Test.postman_environment.json --reporters cli,junit --reporter-junit-export Results/PostmanTests.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        inputs:
          script: 'newman run automatedtesting/postman/Data_Validation.postman_collection.json -e automatedtesting/postman/Test.postman_environment.json --reporters cli,junit --reporter-junit-export Results/DVPostmanTests.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        displayName: Publish Postman Reports
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/Results'
